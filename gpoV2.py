#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/rosa/bin/Py/Gui/list.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os, sys, csv, time
#import pyperclip as clip
import tkinter, tkinter.filedialog
#import signal
import gi
gi.require_version('Gdk', '3.0')
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk as gtk, Gdk, GLib, AppIndicator3 as appindicator;

from pyConfigParser import ConfigIni
from hashlib import blake2s
from base64 import b64encode #b64decode,

import gpo_dlgV2
from PyQt5 import QtWidgets

configDir = os.getenv('HOME')+ "/.config/gpo"
nomeDiz = 'Gpo.diz'
nomeIni = 'Gpo.ini'

def Messaggio(msgT, msgE, testo='Attenzione'):
    msg = QtWidgets.QMessageBox()
    msg.setIcon(QtWidgets.QMessageBox.Warning)
    msg.setStandardButtons(QtWidgets.QMessageBox.Ok)

    msg.setText(testo)
    msg.setWindowTitle(msgT)
    msg.setInformativeText(msgE)

    msg.exec_()

def copyClip1(testo):
    tk = tkinter.Tk()
    tk.withdraw()
    tk.clipboard_clear()

    tk.clipboard_append(testo)
    tk.update()

    tk.destroy()
    time.sleep(3)

def osCopyClip(testo):
    ss = 'echo "' +testo+ '" | xclip'
    x = os.system(ss)

def clipBoard(testo):
    cb = gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)

    #cb.set_text("", 0)
    cb.set_text('', -1)
    cb.set_text(testo, -1)
    clip = cb.wait_for_text()
    if clip is None:
        return 'ERRORE'
    else:
        return clip

def geClipBoard(testo):
    clipboard = Gdk.Display.get_default().get_clipboard()
    clipboard.read_text_async(None, on_paste_text)
    sleep(1)

    clipboard.set(testo)
    sleep(1)
    
def on_paste_text(clipboard, result):
    text = clipboard.read_text_finish(result)
    if text is None:
        Messaggio(  'Creazione password', 'Pwd: creata ma non copiata negli appunti')
    else:
        Messaggio(  'Creazione password', 'Pwd: '+ text + 
                    ' \ncopiata negli appunti')

    main_loop.quit()

#- ttutto ciò che viene dichiarato in class..() diventa proptietà di self.
def Importa(fileImport, selfDiz, creaIni = True):
    arrayCmbUrl = []
    '''
    arrayCmbUrl.append([])
    arrayCmbUrl[0].append(' ')
    arrayCmbUrl[0].append(' ')
    arrayCmbUrl[0].append(' ')
    configDir = os.getenv('HOME')+ "/.config/gpo"
    '''
    idx = 0

# Define the custom dialect
    diz = csv.register_dialect("diz", delimiter=",", quotechar='"', quoting=csv.QUOTE_MINIMAL)

# Open the file in read mode
    if creaIni:
        configuraPWD = ConfigIni(configDir, 'Gpo.ini')
    else:
        fdiz = open(selfDiz, "w")

    with open(fileImport, "r") as csv_file:
        # Create a reader object, using the custom dialect
        csv_reader = csv.reader(csv_file, dialect="diz")
        # Read the data from the file
        for row in csv_reader:
            # Process the data in the row
            #print(row[0])

            if row[0].find('http') == 0:
                arrayCmbUrl.append([])

                arrayCmbUrl[idx].append(row[0])
                arrayCmbUrl[idx].append(row[1])
                arrayCmbUrl[idx].append(row[2])

                if creaIni:
                    configuraPWD.sezione(row[0])
                    configuraPWD.sezione(row[0],"Utente",row[1])
                    configuraPWD.sezione(row[0],"Passwowd",row[2])
                else:
                    fdiz.writelines('"'+row[0]+'","'+row[1]+'","'+row[2] +'"\n')

                idx += 1
        if creaIni:
            configuraPWD.salva()
        else:
            fdiz.close()

    arrayCmbUrl.sort()
    return arrayCmbUrl

class Gpo(QtWidgets.QMainWindow, gpo_dlgV2.Ui_GPO):

    def caricaDati(self):
        self.totItems = 0
        self.curIdxCmb = 0
        self.arrayCmbUrl = []

    # Set initial path to current working directory
        selfDiz = configDir + "/" + nomeDiz
        if len(sys.argv) == 2:
            fileImport = sys.argv[1]
            if os.path.exists(fileImport):
                self.arrayCmbUrl = Importa(fileImport, selfDiz)
            else:
                #raise 'file importazione inesistente'
                pass
        else:
        #- carica tutto
            if os.path.exists(selfDiz):
                self.arrayCmbUrl = []
                self.configuraGpo = ConfigIni(configDir, nomeDiz)

                self.arrayCmbUrl = self.configuraGpo.leggiIni(3) #- 3 elem vuoti
                self.arrayCmbUrl.sort

            else:
                #raise 'file importazione inesistente'
                os.makedirs(configDir)
                File = open(selfDiz, 'w')
                File.close()

#-- init dialog
    def __init__(self, parent=None):
        super(Gpo, self).__init__(parent)
        self.setupUi(self)
        self.setGeometry(400, 150, 627, 246)

        self.cmbUrl.setEnabled(False)
        self.btnCrea.clicked.connect(self.Crea)
        self.btnChiudi.clicked.connect(self.Chiudi)
        self.btnCopy.clicked.connect(self.Copy)
        self.btnSal.clicked.connect(self.Sal)
        self.btnPulisci.clicked.connect(self.Pulisci)
        #self.cmbUrl.changeEvent.connect()  #- self.text_changed
        self.cmbUrl.currentTextChanged.connect(self.Selcmb)

        #self.cmbUrl.addItems(self.arrayCmbUrl)
        idx = 0
        self.passwd = ""
        self.salvare = False
        self.caricaDati()
        for row in self.arrayCmbUrl:
            self.cmbUrl.addItem(row[0], idx)
            idx += 1

        self.totItems = idx
        self.lbUti.setEnabled(True)
        self.cmbUrl.setEnabled(True)
        self.cmbUrl.setCurrentIndex = 1
        self.btnSal.setEnabled(False)
        self.show()
#-- init dialog

    def Crea(self):
        url = self.lblUrl.text()
        uti = self.lbUti.text().strip()
        if uti == "":
            Messaggio("Messaggio Errore", "Utente mancante")
            return 0

        daSx = url.find("www.")
        if daSx == -1:
            daSx = url.find("://") -1

        daSx += 4
        daDx = url.rfind(".")
        if daDx == -1:
            Messaggio("Messaggio Errore", "Controllare URL inserito")
            return 0

        primo = url[daSx:daDx]
        primo = primo[0:1].upper()
        pwd = ("123"+primo+url[daSx+1:daDx]+"!")

        idx = self.totItems
        if idx == 0:
            self.arrayCmbUrl.append([])
            self.arrayCmbUrl[idx].append(" ")
            self.arrayCmbUrl[idx].append(" ")
            self.arrayCmbUrl[idx].append(" ")
            self.cmbUrl.addItem(' ', idx)
            idx +=1

        #uti = self.lbUti.text()

        self.arrayCmbUrl.append([])
        self.arrayCmbUrl[idx].append(url)
        self.arrayCmbUrl[idx].append(uti)
        self.arrayCmbUrl[idx].append(pwd)
        self.arrayCmbUrl.sort()

        self.cmbUrl.addItem(url, idx)
        self.configuraGpo.sezione(url,'utente', uti)
        self.configuraGpo.sezione(url,'password', pwd)
        self.cmbUrl.setCurrentText(' ')
        self.totItems = idx
        self.lblPwd.setText(pwd)
        self.lblPwdSav.setText(pwd)
        self.lbUti.setReadOnly(False)
        self.btnSal.setEnabled(True)

        #self.cmbUrl.setCurrentIndex('0')
        #self.btnSal.setEnabled(True)
        #self.lblPwd.setText("")
        #url = self.lblUrl.setText("")
        #uti = self.lbUti.setText("")
        #pwd = self.lblPwdSav.setText("")

    def Sal(self):
        uti = self.lbUti.text().strip()
        if uti == "":
            Messaggio("Messaggio Errore", "Utente mancante")
            return 0

        url = self.cmbUrl.currentText()
        uti = self.lbUti.text()
        pwd = self.lblPwdSav.text()
        self.arrayCmbUrl[self.curIdxCmb][2] = pwd
        self.configuraGpo.sezione(url,'utente', uti)
        self.configuraGpo.sezione(url,'password', pwd)
        self.configuraGpo.salva()

        '''
        fileImport = self.selfDiz
        with open(fileImport, "a") as file:
            file.writelines('"'+url+'","'+uti+'","'+pwd+'"\n')
            file.close
        '''

        self.cmbUrl.setCurrentText(' ')
        self.lblPwd.setText("")
        self.lblUrl.setText("")
        self.lbUti.setText("")
        self.lblPwdSav.setText("")
        self.btnSal.setEnabled(False)
        self.salvare = False

    def Copy(self):
        iniFile = configDir + "/" + nomeIni
        with open(iniFile, "r") as file:
            key = file.readline()
            file.close

        pwd = self.lblPwdSav.text(); idx = pwd.find('#'); nCar = 0; I = ''
        if idx >-1:
            da = idx +1
            if pwd[len(pwd)-1:] == 'I':    #.find('F'):
                I = 'I'

            nCar = int(pwd[da:da+2])
            pwd = pwd[:idx]

        #key = b'23711'
        key = key.encode()
        h = blake2s(key=key)
        h.update(pwd.encode())
        dig = h.digest()
        pe=b64encode(dig).decode('utf-8')
        if nCar:
            if I == 'I':
                pe = pe[:nCar]
            else:             
                pe = pe[-nCar:]

        '''
        h = hashlib.sha512()
        h.update(pwd.encode())
        pe = h.hexdigest()
        '''

        main_loop = GLib.MainLoop.new(None, True)
        geClipBoard(pe)
        main_loop.run()
        
        self.passwd = copiato
        #clip.copy(pe) #+"X!"
        #self.lblPwdSav.setReadOnly(True)
        
        url = self.cmbUrl.currentText()
        uti = self.lbUti.text()
        pwd = self.lblPwdSav.text()
        pwdIni = self.configuraGpo.prendi(url, 'password') 
        if pwdIni != pwd:
            self.btnSal.setEnabled(True)
            self.salvare = True

    def Pulisci(self):
        self.cmbUrl.setCurrentText(' ')
        self.lblPwd.setText("")
        self.lblUrl.setText("")
        self.lbUti.setText("")
        self.lblPwdSav.setText("")
        self.btnSal.setEnabled(False)
        self.salvare = False

        '''
        self.curIdxCmb = self.cmbUrl.currentIndex()

        self.lblUrl.setText(self.arrayCmbUrl[self.curIdxCmb][0])
        self.lblPwdSav.setText(self.arrayCmbUrl[self.curIdxCmb][2])
        self.lbUti.setText(self.arrayCmbUrl[self.curIdxCmb][1])
        self.lblPwdSav.setReadOnly(False)
        #self.lbUti.setReadOnly(False)
        self.btnSal.setEnabled(True)
        '''

    def Selcmb(self):
        self.curIdxCmb = self.cmbUrl.currentIndex()
        self.lbUti.setText(self.arrayCmbUrl[self.curIdxCmb][1])
        self.lblPwdSav.setText(self.arrayCmbUrl[self.curIdxCmb][2])

        #-print(self.arrayCmbUrl[ikdxCmb][0]+'-'+self.arrayCmbUrl[ikdxCmb][1]+'-'+self.arrayCmbUrl[ikdxCmb][2])

    def Chiudi(self):
        if self.salvare:
            self.Sal()
        
        self.salvare = False
        self.close()

    ##-- inizio
def ExeGPO(par1=''): #main():
    app = QtWidgets.QApplication(sys.argv)
    form = Gpo()
    #form.show() spostato in __init__
    #sys.exit(app.exec_())

    app.exec_()

def mainGPO():
    ExeGPO('param')

def fileDlg(ext, opt = False):
    reso = ''
    ext = "*." + ext
    if opt:
        reso = tkinter.filedialog.asksaveasfilename(initialdir=os.getenv('HOME'),
                                                    title="Salva con nome",
                                                    defaultextension=".csv",
                                                    filetypes=[("Files csv", "*.csv"),
                                                    ("Tutti i tipi", "*.*")])

        return reso
    else:
        reso = tkinter.filedialog.askopenfilename(  initialdir=os.getenv('HOME'),
                                                    title="Scegli il File in formato csv",
                                                    filetypes=(("Files csv", ext),
                                                    ("Tutti i tipi", "*.*")))

        return reso.name
    '''
    try:

    Exception:

    percorso = reso[0].name
    percorso = percorso[:reso[0].name.rfind('/')]
    nome = reso[0].name[reso[0].name.rfind('/')+1:]
    gNomeIni = gNome[:gNomeIni.index('.')]
    file = percorso +'/'+ nome
    '''

def menu():
    menu = gtk.Menu()

#-- menu principale --
    impoTray = gtk.MenuItem(label='Importa csv')
    impoTray.connect('activate', impo)
    menu.append(impoTray)

    espoTray = gtk.MenuItem(label='Esporta csv')
    espoTray.connect('activate', espo)
    menu.append(espoTray)

    mostraTray = gtk.MenuItem(label='GPO')
    mostraTray.connect('activate', mostra)
    menu.append(mostraTray)

    esciTray = gtk.MenuItem(label='Exit')
    esciTray.connect('activate', quit)

    menu.append(esciTray)
    menu.show_all()

    return menu

def impo(_):
    fileImport = fileDlg('csv')
    if len(fileImport):
        configDir = os.getenv('HOME')+ "/.config/gpo"
        selfDiz = configDir + '/Gpo.ini'
        arrayCmbUrl = Importa(fileImport, selfDiz)

def espo(_):
    fileEsport = fileDlg('*', True)
    if len(fileEsport):
        arrayCmbUrl = []
        configDir = os.getenv('HOME')+ "/.config/gpo"
        configuraGpo = ConfigIni(configDir, 'Gpo.ini')
        arrayCmbUrl = configuraGpo.leggiIni() #- 3 elem vuoti
        fdiz = open(fileEsport, "w")
        for row in arrayCmbUrl:
            fdiz.writelines('"'+row[0]+'","'+row[1]+'","'+row[2] +'"\n')

        fdiz.close()

def mostra(_):
    ExeGPO('param')

def quit(_):
    gtk.main_quit()
    return 0

if __name__ == '__main__':
    
    currpath = os.path.dirname(os.path.realpath(__file__))
    indicator = appindicator.Indicator.new("gestorPGO", os.path.abspath('/usr/share/icons/AdwaitaLegacy/32x32/legacy/dialog-password.png'),
                                            appindicator.IndicatorCategory.APPLICATION_STATUS)
    indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(menu())
	#provo
    #indicator.set_menu(os.system("galculator")) esegue direttamente senza click
    gtk.main();

    #return main
#signal.signal(signal.SIGINT, signal.SIG_DFL)
#Gtk.main()
