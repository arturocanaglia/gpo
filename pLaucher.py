#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/rosa/bin/Py/Gui/list.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import configparser, os, sys
import tkinter.filedialog
import pLaucher_gui

from PyQt5 import QtWidgets

def cnv2(val, into):
    if val:
        return into

def soloNome(nome):
    nn =  nome
    x = nn.rfind('/')
    if x > 0:
        #nn = nome.rfind('/')+1
        nn = nn[x+1:]

    x = nn.find('.')
    if x > 0:
        nn = nn[:x]

    return nn

class Laucher(QtWidgets.QMainWindow, pLaucher_gui.Ui_laucher):
    # Set initial path to current working directory
    savedir = os.getcwd()
    gNome = ""
    defNome = ""
    HOME = os.getenv("HOME")

    if len(sys.argv) == 2:
        defNome = sys.argv[1]
        defNome = soloNome(defNome)

    def __init__(self, parent=None):
        super(Laucher, self).__init__(parent)
        self.setupUi(self)

        self.lstCategarie.addItems(['AudioVideo', 'Audio', 'Video', 'Development', 'Education', 'Game', 'Graphics', 'Network', 'Office', 'Settings', 'Utility'])
        self.nome.setText(self.defNome)
        self.OpenButton.clicked.connect(self.ApriDesktop)
        self.SaveButton.clicked.connect(self.Salva)
        self.ClearButton.clicked.connect(self.Pulisci)
        self.CancelButton.clicked.connect(self.Annulla)
        self.Cercaesegui.clicked.connect(self.Tesugui)
        self.Cercaicona.clicked.connect(self.Ticona)

        self.show()

    def Tesugui(self):
        reso = tkinter.filedialog.askopenfiles(initialdir=self.HOME, title="Scegli il File", filetypes=(("Files eseguibile", "*.*"), ("", "")))
        nome = soloNome(reso[0].name)
        if reso[0].name.find('sh') > 0:
            nome = nome + '.sh'

        self.esegui.setText(nome)

    def Ticona(self):
        reso = tkinter.filedialog.askopenfiles(initialdir=self.HOME, title="Scegli il File", filetypes=(("Icon", "*.*"), ("", "")))
        self.icona.setText(reso[0].name)

    def ApriDesktop(self):
        #Hides the Tkinter window
        root = tkinter.Tk()
        root.withdraw()

        count=0
        pathtext=""
        filepath = tkinter.filedialog.askopenfiles(initialdir=self.savedir, title="Scegli il File", filetypes=(("File con estensione .desktop", "*.de"), ("", "")))
        filepath = filepath[0].name
        #Save the path of the selected file for easier selection
        self.savedir = filepath

        for file in self.savedir:
            #Check if file extension is *.de...sktop
            if filepath.name[len(filepath.name)-1]!='i' and filepath.name[len(filepath.name)-2]!='u' :
                Messaggio("Oops, file configurazione errato!", "Scegliere un file .desktop corretto.")

                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText("Oops, file configurazione errato!")
                msg.setInformativeText("Scegliere un file .desktop corretto.")
                msg.setWindowTitle("Errore")
                msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
                msg.exec_()
                self.Clear()

            else:
                pathtext = filepath.name + "   "
                count = 1

                #Update UI elements
                self.SelectedFilesLabel.setText("Files scelto")
                self.PathLabel.setText(pathtext)

        self.nome.setText("")
        self.commento.setText("")
        self.icona.setText("")
        self.suggerimento.setText("")
        self.esegui.setText("")

    def Salva(self):
        """
        [Desktop Entry]
        Name=$name
        Name[it]=$name
        GenericName=$name
        GenericName[it]=$name
        Comment=$1
        Exec=$1
        Icon=$name.png
        MimeType=";"
        NoDisplay=false
        Terminal=false
        Type=Application
        Categories=GTK;System;Settings;
        X-Ubuntu-Gettext-Domain=
        StartupNotify=true
        StartupWMClass=$name
        """
        #- dove sta il programma
        dtName = self.savedir

        cats = self.lstCategarie.selectedItems()
        nome = self.nome.text()
        commento = self.commento.text()
        icona = self.icona.text()
        suggerimento = self.suggerimento.text()
        esegui = self.esegui.text()
        notifica = cnv2(self.notifica.isChecked(), "false")
        visibile = cnv2(self.visibile.isChecked(), "false")
        terminale = cnv2(self.terminale.isChecked(), "false")

        i = 0
        #x = []
        categorie = ""
        for i in range(len(cats)):
            #x.append(str(self.lstCategarie.selectedItems()[i].text())+";")
            categorie = categorie + str(self.lstCategarie.selectedItems()[i].text())+";"

        categorie = categorie +";" + self.utiCat.text()

        #if i:
        #    print (x)
        #else:
        #    Messaggio("Scelta categorie", "Scegliere almeno una categoria.")

        destDir = os.getenv("HOME")+"/.local/share/applications/"
        fileDesktop = destDir + nome + ".desktop"
        if not os.path.exists(destDir):
            os.makedirs(destDir)

        try:
            file = open(fileDesktop, 'w+')

        except IOError as e:
            Messaggio("Errore ", e.errno)

        """
        Config = configparser.ConfigParser()
        Config.add_section('Desktop Entry')
        Config.set('Desktop Entry','Version', '1.0')
        Config.set('Desktop Entry','Type', 'Application')
        Config.set('Desktop Entry','Name', nome)
        Config.set('Desktop Entry','Name[it]', commento)
        Config.set('Desktop Entry','GenericName', nome)
        Config.set('Desktop Entry','GenericName[it]', nome)
        Config.set('Desktop Entry','Icon', icona)
        Config.set('Desktop Entry','Terminal', terminale)
        Config.set('Desktop Entry','Exec', esegui)
        Config.set('Desktop Entry','Categories', categorie)
        Config.set('Desktop Entry','X-Ubuntu-Gettext-Domain', '')
        Config.set('Desktop Entry','StartupNotify', notifica)
        Config.set('Desktop Entry','StartupWMClass', nome)
        Config.set('Desktop Entry','Comment', commento)
        Config.set('Desktop Entry','NoDisplay', visibile)
        #Config.set('Desktop Entry','', '')
        #Config.set('Desktop Entry','', '')
        #Config.set('Desktop Entry','', '')

        Config.write(file)
        """
        ss = ['[Desktop Entry]' + '\n' \
              ,'Type=Application' + '\n' \
              ,'Name=', nome + '\n' \
              ,'Name[it]=', commento + '\n' \
              ,'GenericName=', nome + '\n' \
              ,'GenericName[it]=', nome + '\n' \
              ,'Exec=', esegui + '\n' \
              ,'Icon=', icona + '\n' \
              ,'Terminal=', terminale + '\n' \
              ,'Exec=', esegui + '\n' \
              ,'Categories=', categorie + '\n' \
              ,'X-Ubuntu-Gettext-Domain=' + '\n' \
              ,'StartupNotify=', notifica + '\n' \
              ,'StartupWMClass=', nome + '\n' \
              ,'Comment=', commento + '\n' \
              ,'NoDisplay=', visibile + '\n']

        file.writelines(ss)
        file.close()
        self.Pulisci()
        self.SelectedFilesLabel.setText(fileDesktop + " creato correttamente!")

    def Pulisci(self):
        #Clear UI Elements

        self.lstCategarie.clear()
        self.lstCategarie.addItems(['AudioVideo', 'Audio', 'Video', 'Development', 'Education', 'Game', 'Graphics', 'Network', 'Office', 'Settings', 'Utility'])

        self.notifica.setChecked(True)
        self.visibile.setChecked(True)
        self.terminale.setChecked(True)

        self.nome.setText(self.defNome)
        self.commento.setText("")
        self.icona.setText("")
        self.suggerimento.setText("")
        self.esegui.setText("")
        self.utiCat.setText("")

        self.SelectedFilesLabel.setText("")
        self.PathLabel.setText("")

    def Messaggio(msgT, msgE):
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setText(msgT)
        msg.setInformativeText(msgE)
        msg.setWindowTitle("Errore")
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.exec_()

    def Annulla(self):
        self.close()

##-- inizio
def main():
    app = QtWidgets.QApplication(sys.argv)
    form = Laucher()
    #form.show()
    app.exec_()

if __name__ == '__main__':
    main()
